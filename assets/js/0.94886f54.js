(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{63:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"変数と定数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#変数と定数","aria-hidden":"true"}},[t._v("#")]),t._v(" 変数と定数")]),a("h2",{attrs:{id:"変数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#変数","aria-hidden":"true"}},[t._v("#")]),t._v(" 変数")]),a("p",[t._v("Nimの変数宣言は二種類あります。")]),a("table",[a("thead",[a("tr",[a("th",[t._v("変数")]),a("th",[t._v("初期化")]),a("th",[t._v("再代入")])])]),a("tbody",[a("tr",[a("td",[t._v("var")]),a("td",[t._v("不要")]),a("td",[t._v("可能")])]),a("tr",[a("td",[t._v("let")]),a("td",[t._v("必須")]),a("td",[t._v("不可能")])])])]),a("p",[a("code",[t._v("var")]),t._v("は再代入可能な変数宣言で、何度でも値を入れ替える事ができます。")]),a("p",[t._v("型は変数名の後ろに"),a("code",[t._v(":")]),t._v("を付け、その後に任意の型を宣言します。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" int "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\nx "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("# this is error !")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# let x: int = 0")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# x = 1")]),t._v("\n")])]),a("p",[t._v("Nimには型推論があり、型を省くことが出来ます。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"apple"')]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"banana"')]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("128")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("# a and b is string")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# c is int")]),t._v("\n")])]),a("p",[t._v("ただし、特定の条件下では明示的に型を指定しなければならない場合もあります。")]),a("p",[t._v("また、インデントを使うことで一度に複数の変数宣言をすることができます。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v("\n  a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"apple"')]),t._v("\n  b "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"banana"')]),t._v("\n  c "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("128")]),t._v("\n")])]),a("p",[t._v("これはおまけですが、変数宣言で扱える文字範囲が決まっており、その範囲内であれば変数名にする事ができます。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" マジ卍 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"ﾏｼﾞ ﾏﾝｼﾞｨｨｨｨｨ!!!!!"')]),t._v("\n")])]),a("h2",{attrs:{id:"定数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定数","aria-hidden":"true"}},[t._v("#")]),t._v(" 定数")]),a("p",[t._v("2種類の変数の他に、特別な定数シンボルとして"),a("code",[t._v("const")]),t._v("があります。")]),a("p",[a("code",[t._v("const")]),t._v("はコンパイル時に値が決まっている事が必須で、"),a("code",[t._v("let")]),t._v("と同じように中の値を変更することは出来ません。")]),a("p",[t._v("例えば悪い例として、以下のようなコードがあります。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("readLine")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stdin"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("p",[a("code",[t._v("readLine")]),t._v("は、標準入力から一行読み取る関数です。")]),a("p",[t._v("このコードでは、ユーザーからの入力を"),a("code",[t._v("const x")]),t._v("に入れようとしていますが、これはコンパイル後に決まる値です。")]),a("p",[t._v("なので、このコードはコンパイル出来ません。")]),a("p",[t._v("コンパイル前に既に値が決まっており、以後変更しない物であれば"),a("code",[t._v("const")]),t._v("、それ以外では"),a("code",[t._v("var")]),t._v("や"),a("code",[t._v("let")]),t._v("を使いましょう。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("readLine")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stdin"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])}],!1,null,null,null);s.default=e.exports}}]);