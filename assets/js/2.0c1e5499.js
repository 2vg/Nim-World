(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{50:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"文字列型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文字列型","aria-hidden":"true"}},[t._v("#")]),t._v(" 文字列型")]),n("ul",[n("li",[n("code",[t._v("string")])])]),n("p",[n("code",[t._v("string")]),t._v("はNimで使われる通常の文字列型です。文字列型は"),n("code",[t._v("char")]),t._v("型の配列ですが、ヌル終端であることと長さを保持している点が特別です。")]),n("p",[t._v("NimはキャラクタセットとしてUnicodeを採用し, 基本的なエンコーディング方式としてUTF-8を採用することでマルチバイト文字をうまく扱うことができます。")]),n("pre",{pre:!0,attrs:{class:"language-nim"}},[n("code",[t._v("echo "),n("span",{attrs:{class:"token string"}},[t._v('"Hi"')]),t._v("  "),n("span",{attrs:{class:"token comment"}},[t._v('# => "Hi"')]),t._v("\necho "),n("span",{attrs:{class:"token string"}},[t._v('"文字列"')]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v('# => "文字列"')]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("# スライス操作も可能, ただしバイト列を扱っていることに注意")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v('# echo "文字列"[0 .. ^2] # こちらは表示崩れを引きおこす')]),t._v("\necho "),n("span",{attrs:{class:"token string"}},[t._v('"文字列"')]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("..")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("^")]),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v('# => "文字"')]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"日本語"')]),t._v("\necho "),n("span",{attrs:{class:"token function"}},[t._v("len")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{attrs:{class:"token comment"}},[t._v("# => 9: バイトの長さが返ってくる.")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("# 文字列の長さが欲しい場合, runeLenを使うことができる.")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" unicode\necho "),n("span",{attrs:{class:"token function"}},[t._v("runeLen")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("# => 3")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("# 普通にforを適用した場合, バイト列に対する反復操作になる.")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" c "),n("span",{attrs:{class:"token operator"}},[t._v("in")]),t._v(" str"),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  echo "),n("span",{attrs:{class:"token operator"}},[t._v("$")]),t._v("c"),n("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("int\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("# 各文字に対する反復操作はunicodeモジュールのutf8を使う.")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" c "),n("span",{attrs:{class:"token operator"}},[t._v("in")]),t._v(" str"),n("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("utf8"),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  echo c\n")])]),n("ul",[n("li",[n("code",[t._v("cstring")])])]),n("p",[n("code",[t._v("cstring")]),t._v("は主にCとの連携で使う文字列型で、Cにおいて"),n("code",[t._v("char *")]),t._v("と同じものを意味します。")]),n("p",[t._v("内部的にはGCの回収対象で、回収されてしまうことがありますが、GCはスタックのルートを控えめに監視しているので、ほぼ回収されることはありません。")]),n("p",[t._v("ですが、もし問題が起きる場合は"),n("code",[t._v("GC_ref")]),t._v("や"),n("code",[t._v("GC_unref")]),t._v("を使用してGC回収を防ぐことができます。")])])}],!1,null,null,null);s.default=e.exports}}]);