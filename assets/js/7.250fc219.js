(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{73:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"参照"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参照","aria-hidden":"true"}},[t._v("#")]),t._v(" 参照")]),a("p",[t._v("Nimでは2種類のポインタと呼ばれる物を扱う事ができます。")]),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),a("p",[t._v("ポインタとは、"),a("strong",[t._v("ある値が保存されている場所を格納する変数")]),t._v("のことであり、しばしば出てくるポインタ変数の略称のようなものです。")]),a("p",[t._v("ちなみに、ある値が保存されている場所の事を"),a("strong",[t._v("アドレス")]),t._v("と言います。")])]),a("p",[t._v("Nimでポインタを扱うには変数を"),a("code",[t._v("var")]),t._v("で定義しなければなりません。")]),a("p",[t._v("しかし、これはアドレスが欲しい変数のみの制約であり、変数のアドレスを格納する変数(ポインタ)は"),a("code",[t._v("let")]),t._v("でも大丈夫です。")]),a("p",[a("code",[t._v("ref")]),t._v("と"),a("code",[t._v("ptr")]),t._v("の2種類のポインタ型があり、"),a("code",[t._v("ref")]),t._v("はGCが追跡するヒープ内のオブジェクトを指し、使われなくなったら自動的にリソースを解放します。")]),a("p",[a("code",[t._v("ptr")]),t._v("はGCの管理外のヒープ内のオブジェクトを指すので、私達プログラマーがリソースを使い終わったら解放する必要があり、アンセーフです。")]),a("p",[t._v("基本的には"),a("code",[t._v("ref")]),t._v("を使い、メモリとポインタをよく知っている人たちは"),a("code",[t._v("ptr")]),t._v("を使ってもいいでしょう。")]),a("p",[t._v("ここでは"),a("code",[t._v("ref")]),t._v("を解説し、"),a("code",[t._v("ptr")]),t._v("やGCについてはまた別の章で解説します。")]),a("p",[t._v("ヒープの話も"),a("code",[t._v("ptr")]),t._v("を説明する章で少し詳しく説明するので、そちらも合わせて見てみてください。")]),a("p",[t._v("とりあえず今は2種類のポインタがある、ということだけ覚えておきましょう。")]),a("h2",{attrs:{id:"refと型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#refと型","aria-hidden":"true"}},[t._v("#")]),t._v(" refと型")]),a("p",[t._v("まずは定義例を見てみましょう。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" refStr"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" string\n")])]),a("p",[t._v("この変数は、"),a("code",[t._v("string")]),t._v("の"),a("code",[t._v("ref")]),t._v("ポインタ変数を宣言しています。")]),a("p",[t._v("しかし、まだ値を入れることは出来ません。")]),a("p",[t._v("どういう事か実際に見てみましょう。")]),a("p",[a("code",[t._v("echo repr refStr")]),t._v("とすることでポインタの指し示す場所や値を見ることができます。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" refStr"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" string\n\necho repr refStr\n")])]),a("p",[a("code",[t._v("nil")]),t._v("と表示されましたか？それはバグではなく、正常な物です。")]),a("p",[t._v("先程ポインタは値の場所を指し示す物だと言いました。")]),a("p",[t._v("つまり、ここでは"),a("strong",[t._v("場所を記憶する変数")]),t._v("を宣言しただけで、"),a("strong",[t._v("実際の値が入る場所の確保")]),t._v("が出来ていないのです。")]),a("p",[t._v("なので、値を入れる前に、"),a("code",[t._v("new(string)")]),t._v("で"),a("code",[t._v("string")]),t._v("の値が入る場所を確保してあげる必要があります。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[t._v("refStr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("new")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# 引数が1つなので、このように書くことも可能")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# refStr = new string")]),t._v("\n")])]),a("p",[t._v("これで"),a("code",[t._v("string")]),t._v("の値を確保し、"),a("code",[t._v("refStr")]),t._v("はその場所を指し示す物となりました。")]),a("p",[t._v("先程と同じく"),a("code",[t._v("echo repr refStr")]),t._v("でもう一度見てみましょう。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" refStr"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" string\n\nrefStr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" new string\n\necho repr refStr\n")])]),a("p",[t._v("おそらく"),a("code",[t._v("ref 0x英数字の並び --\x3e nil")]),t._v("というような物が表示されているはずです。")]),a("p",[t._v("ここでの"),a("code",[t._v("nil")]),t._v("は"),a("code",[t._v("string")]),t._v("の初期値なのでまだ文字列が何も無い事を意味します。")]),a("p",[a("code",[t._v("ref 0x英数字の並び")]),t._v("は、実行するたびに変化します。これは場所の確保をする時に同じ場所を確保することが出来ない場合があるからです。")]),a("p",[t._v("ここでは仮に"),a("code",[t._v("ref 0x12345678")]),t._v("とすることにします。この英数字の並びは一般的に"),a("strong",[t._v("アドレス")]),t._v("と呼ばれます。")]),a("p",[t._v("では場所の確保も出来た所で、早速値を入れてみましょう。")]),a("p",[t._v("値を入れるには、ポインタが指し示す場所を参照し、値を代入します。")]),a("p",[t._v("このポインタが指し示す場所を参照することを"),a("strong",[t._v("間接参照")]),t._v("や"),a("strong",[t._v("逆参照")]),t._v("と呼びます。")]),a("p",[t._v("値を間接参照するには配列などで使う"),a("code",[t._v("[]")]),t._v("をポインタ変数の後に付けて参照します。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[t._v("refStr"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"test"')]),t._v("\n")])]),a("p",[t._v("これで"),a("code",[t._v("refStr")]),t._v("が指し示す場所に"),a("code",[t._v('"test"')]),t._v("という文字列が入りました。")]),a("p",[a("code",[t._v("echo")]),t._v("で表示することができます。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[t._v("echo refStr"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("# echo repr refStr")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('# ref 0x12345678 -> ref 0x0abcdefg"test"')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# 文字列の一番先頭の文字のアドレスを指し示している")]),t._v("\n")])]),a("p",[t._v("ここまでで一般的な"),a("code",[t._v("ref")]),t._v("の説明は終わりですが、普通の変数と何が違うのか分かりますか？")]),a("p",[t._v("以下のコードを見てみましょう。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v("\n  str1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"test"')]),t._v("\n  str2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" str1\n\nstr2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"aaaa"')]),t._v("\n\necho str1\necho str2\n")])]),a("p",[t._v("何の変哲も無いコードです。"),a("code",[t._v("str1")]),t._v("を"),a("code",[t._v("str2")]),t._v("に入れた後、"),a("code",[t._v("str2")]),t._v("に"),a("code",[t._v('"aaaa"')]),t._v("という文字列を代入しました。")]),a("p",[t._v("実行すると"),a("code",[t._v("test")]),t._v("と"),a("code",[t._v("aaaa")]),t._v("が表示されるはずです。")]),a("p",[t._v("では次のコードを見てみましょう。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v("\n  str1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" new string\n  str2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" str1\n\nstr1"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"test"')]),t._v("\nstr2"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"aaaa"')]),t._v("\n\necho str1"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\necho str2"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),a("p",[t._v("実行すると何が表示されましたか？おそらく二回"),a("code",[t._v("aaaa")]),t._v("が表示されるはずです。")]),a("p",[t._v("何故でしょうか？ 私達は"),a("code",[t._v("str1")]),t._v("には確かに"),a("code",[t._v("test")]),t._v("を代入しているはずです。")]),a("p",[t._v("ここで普通の変数との違いが出てきます。")]),a("p",[a("code",[t._v("str1")]),t._v("と"),a("code",[t._v("str2")]),t._v("はどちらも"),a("code",[t._v("string")]),t._v("の値を指し示す変数です。")]),a("p",[t._v("つまり"),a("code",[t._v("str2 = str1")]),t._v("はどちらも同じ"),a("code",[t._v("string")]),t._v("の値の場所を指し示す物となります。")]),a("p",[t._v("なので、"),a("code",[t._v("str2")]),t._v("の中身を変更すると同じ場所を指し示す"),a("code",[t._v("str1")]),t._v("の値も同じ物になります。")]),a("p",[t._v("ここでは"),a("code",[t._v("str2")]),t._v("の指し示す場所の値を"),a("code",[t._v("aaaa")]),t._v("に変更したため、同じ場所を指し示す"),a("code",[t._v("str1")]),t._v("の中身も"),a("code",[t._v("aaaa")]),t._v("になっているのです。")]),a("p",[t._v("この挙動が何で役に立つかというと、例えば関数の引数に使う例があります。")]),a("p",[t._v("通常、関数の引数に渡す値は、コピーが発生します。")]),a("p",[t._v("Nimでは通常参照渡しとなり、コピーが発生しません。しかし、渡された値を編集した時点でコピーされてしまします。")]),a("p",[t._v("仮に巨大なサイズのオブジェクトがあってそれを関数内部で編集する関数があったとしましょう。")]),a("p",[t._v("関数に渡して編集した時点で値がコピーされるので巨大なサイズのオブジェクトがもう一つできる事になります。")]),a("p",[t._v("これが数回程度ならいいかもしれませんが、数千回、数万回となってくるとどうでしょうか？")]),a("p",[t._v("ここで巨大なサイズのオブジェクトを指し示すポインタ変数を用意して、その変数を関数に渡すとどうでしょうか？")]),a("p",[t._v("ここで発生するコピーはアドレスの数値のみです。中身は間接参照して取得することが出来ますよね。")]),a("p",[t._v("つまり、値をコピーしたくないので、関数に値を渡す代わりに"),a("code",[t._v("ref T")]),t._v("を渡せば値のコピーがなくなり、処理速度が向上する、ということになります。")]),a("p",[t._v("ただし、渡した"),a("code",[t._v("ref T")]),t._v("が指し示す値を直接変更したりする操作がある場合、")]),a("p",[t._v("関数の外で他にも同じ場所を指し示すポインタ変数がある場合などで注意が必要です。")]),a("h2",{attrs:{id:"refとobject型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#refとobject型","aria-hidden":"true"}},[t._v("#")]),t._v(" refとobject型")]),a("p",[a("code",[t._v("ref")]),t._v("を"),a("code",[t._v("object")]),t._v("で扱う事は通常の"),a("code",[t._v("ref")]),t._v("の使用とほぼ同じです。")]),a("p",[a("code",[t._v("object")]),t._v("は"),a("code",[t._v("type")]),t._v("ステートメントで宣言しますが、ここで"),a("code",[t._v("ref")]),t._v("を使うのと"),a("code",[t._v("new object")]),t._v("をするのとでは少し違います。")]),a("p",[t._v("まずは以下のコードを見てみましょう。")]),a("p",[t._v("それぞれ関数内部でオブジェクトを作成し、それを返り値としています。")]),a("pre",{pre:!0,attrs:{class:"language-nim"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v("\n  Obj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("object")]),t._v("\n    name"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n\n  ObjRef "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" Obj\n\n  ObjRef2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("object")]),t._v("\n    name"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("oCreate1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" Obj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Obj")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"john"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  echo repr o\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" o\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("oCreate2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" ObjRef "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("ObjRef")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"sam"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  echo repr o\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" o\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("oCreate3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" ObjRef2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("ObjRef2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"2vg"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  echo repr o\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" o\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("oCreate4")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" Obj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Obj\n  o"),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"mofu"')]),t._v("\n  echo repr o\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" o\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v("\n  o1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("oCreate1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  o2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("oCreate2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  o3 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("oCreate3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  o4 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("oCreate4")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\necho "),a("span",{attrs:{class:"token string"}},[t._v('"\\n--------\\n"')]),t._v("\n\necho repr o1\necho repr o2\necho repr o3\necho repr o4\n")])]),a("p",[t._v("実行すると気づいた事があると思います。")]),a("p",[a("code",[t._v("oCreate1")]),t._v("で作成されたオブジェクトは関数内のアドレスと関数の返り値でもらったオブジェクトは別々のアドレスになっていると思います。\nしかし、"),a("code",[t._v("oCreat2")]),t._v("から"),a("code",[t._v("oCreat4")]),t._v("は関数内のアドレスと同じです。")]),a("p",[t._v("違いが分かりますか？")]),a("p",[a("code",[t._v("oCreat1")]),t._v("で作られる"),a("code",[t._v("Obj")]),t._v("は関数内のスタックに作成されるのに対し、"),a("code",[t._v("ObjRef")]),t._v("、 "),a("code",[t._v("ObjRef2")]),t._v("、"),a("code",[t._v("ref Obj")]),t._v("はどれもヒープ内に作成されます。")]),a("p",[t._v("そのため、通常の"),a("code",[t._v("object")]),t._v("は関数を超えてアクセスできませんが、"),a("code",[t._v("ref")]),t._v("が付随すると関数を超えてオブジェクトにアクセスすることができるのです。")]),a("p",[a("code",[t._v("ref")]),t._v("を付随してヒープに作られたオブジェクトは、")]),a("p",[t._v("どこの変数からも参照がなくなったりして使われなくなると自動的に解放されるため、私たちは通常通りにコードを書くだけで良いのです。")])])}],!1,null,null,null);s.default=e.exports}}]);